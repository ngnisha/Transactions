--what is a transaction
A transaction is a group of commands that change the data stored in a database. A transaction is treated as a single unit of work.
A transaction ensures that either all of the commands succeed or none of them. 
If one of the commands in the transaction fails, all of the commands fail and any data that was modified in the database is rolled back.
In this way transactions maintain the integrity of data in a database.

---Transfer RS 100 from shyam to nisha Account
BEGIN TRY
 BEGIN TRANSACTION
  UPDATE Accounts SET Bal = Bal - 100 WHERE Id = 1
  UPDATE Accounts SET Bal = Bal + 100 WHERE Id = 2
 COMMIT TRANSACTION
 PRINT 'Transaction Committed'
END TRY
BEGIN CATCH
 ROLLBACK TRANSACTION
 PRINT 'Transaction Rolled back'
END CATCH


---Some of the common concurrency problems
Dirty Reads
Lost Updates
Nonrepeatable Reads
Phantom Reads

---SQL Server provides different transaction isolation levels, to balance concurrency problems and performance depending on our application needs.
Read Uncommitted
Read Committed
Repeatable Read
Snapshot
Serializable



Isolation Level           Dirty Reads              Lost Update              Nonrepeatable Reads                            Phantom Reads
Read Uncommitted            Yes                       Yes                      Yes                                            Yes
Read Committed               No                       Yes                      Yes                                            Yes
Repeatable Read              No                       No                        No                                            Yes
Snapshot                     No                       No                        No                                             No
Serializable                 No                       No                        No                                             No



---If you choose the lowest isolation level (i.e Read Uncommitted),
it increases the number of concurrent transactions that can be executed at the same time,
but the down side is you have all sorts of concurrency issues. On the other hand if you choose the highest isolation level (i.e Serializable),
you will have no concurrency side effects, but the downside is that, this will reduce the number of concurrent transactions that can be executed at the same time if those transactions work with same data.



---1st concurrency problem ==-dirty read only happens in Read uncommitted isolation level

when one transaction is permitted to read data that has been modified by another transaction that has not yet been committed.
In most cases this would not cause a problem.
However, if the first transaction is rolled back after the second reads the data, the second transaction has dirty data that does not exist anymore.

--example 

Transaction 1 : 

Begin Tran
Update tblInventory set ItemsInStock = 9 where Id=1

-- Billing the customer
Waitfor Delay '00:00:15'
-- Insufficient Funds. Rollback transaction
Rollback Transaction

Transaction 2 :
Set Transaction Isolation Level Read Uncommitted
Select * from tblInventory where Id=1


Read Uncommitted transaction isolation level is the only isolation level that has dirty read side effect. 
This is the least restrictive of all the isolation levels. When this transaction isolation level is set,
it is possible to read uncommitted or dirty data. Another option to read dirty data is by using NOLOCK table hint. The query below is equivalent to the query in Transaction 2.

Select * from tblInventory (NOLOCK) where Id=1
or 
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
select * from tblinventory where id = 1
--but results in dirty read

---2nd concurrency problem --Lost Updates (happens in Read uncommiited and Read commmitted isolation level)

---Lost update problem happens when 2 transactions read and update the same data.
Let's understand this with an example. 

Consider the following 2 transactions - Transaction 1 and Transaction 2.
Transaction 1 starts first, and it is processing an order for 1 Phone. It sees Stock as 10.
At this time Transaction 2 is processing another order for 2 Phones. It also sees Stock as 10. Transaction 2 makes the sale first and updates Stock with a value of 8.
At this point Transaction 1 completes the sale and silently overwrites the update of Transaction 2. As Transaction 1 sold 1 Phone it has updated Stock to 9, while it actually should have updated it to 7.
-- Transaction 1
Begin Tran
Declare @Stock int

Select @Stock = Stock 
from tblInventory where Id=1

-- Transaction takes 10 seconds
Waitfor Delay '00:00:10'
Set @Stock = @Stock - 1

Update tblInventory 
Set Stock = @Stock where Id=1

Print @Stock
Commit Transaction

-- Transaction 2
Begin Tran
Declare @Stock int

Select @Stock = Stock 
from tblInventory where Id=1

-- Transaction takes 1 second
Waitfor Delay '00:00:02'
Set @Stock = @Stock - 2

Update tblInventory 
Set Stock = @Stock where Id=1

Print @ItemsInStock
Commit Transaction

Both Read Uncommitted and Read Committed transaction isolation levels have the lost update side effect.
Repeatable Read, Snapshot, and Serializable isolation levels does not have this side effect.
If you run the above Transactions using any of the higher isolation levels (Repeatable Read, Snapshot, or Serializable) you will not have lost update problem.
The repeatable read isolation level uses additional locking on rows that are read by the current transaction,
and prevents them from being updated or deleted elsewhere. This solves the lost update problem.

For both the above transactions, set Repeatable Read Isolation Level.
Run Transaction 1 first and then a few seconds later run Transaction 2.
Transaction 1 completes successfully, but Transaction 2 competes with the following error.
Transaction was deadlocked on lock resources with another process and has been chosen as the deadlock victim. Rerun the transaction.

--3)Non repeatable reads concurrency level
Non repeatable read problem happens when one transaction reads the same data twice and another transaction updates that data in between the first and second read of transaction one. 

Transaction 1 starts first. Reads Stock. Gets a value of 10 for first read. 
Transaction 1 is doing some work and at this point Transaction 2 starts and Updates Stock to 5. 
Transaction 1 then makes a second read. At this point Transaction 1 gets a value of 5, reulting in non-repeatable read problem.

Non-repeatable read example : 
Transaction 1
Set transaction isolation level repeatable read
Begin Transaction
Select Stock from tblInventory where Id = 1

-- Do Some work
waitfor delay '00:00:10'

Select Stock from tblInventory where Id = 1
Commit Transaction

-- Transaction 2
Update tblInventory set Stock = 5 where Id = 1
----Fixing non repeatable read concurrency problem : 
To fix the non-repeatable read problem, set transaction isolation level of Transaction 1 to repeatable read. 
This will ensure that the data that Transaction 1 has read, will be prevented from being updated or deleted elsewhere.
This solves the non-repeatable read problem. 


---4) phantom reads
--Phantom read happens when one transaction executes a query twice and
it gets a different number of rows in the result set each time.
This happens when a second transaction inserts a new row that matches the WHERE clause of the query executed by the first transaction. 

using table tblEmployees 

Scrip to create the table tblEmployees
Create table tblEmployees
(
 Id int primary key,
 Name nvarchar(50)
)
Go

Insert into tblEmployees values(1,'nisha')
Insert into tblEmployees values(3, 'Shyam')
Insert into tblEmployees values(100, 'nikunj')

Transaction 1 starts first. Reads from Emp table where Id between 1 and 3. 
2 rows retrieved for first read. 
Transaction 1 is doing some work and at this point Transaction 2 starts
and inserts a new employee with
Id = 2. Transaction 1 then makes a second read. 3 rows retrieved for second read, resulting in phantom read problem.

-- Transaction 1
Begin Transaction

Select * from tblEmployees 
where Id between 1 and 3

-- Do Some work
waitfor delay '00:00:10'

Select * from tblEmployees 
where Id between 1 and 3

Commit Transaction

-- Transaction 2
Insert into tblEmployees values(2, 'mittal')

Serializable or any other higher isolation level should solve the phantom read problem.

Fixing phantom read concurrency problem : 
To fix the phantom read problem,
set transaction isolation level of Transaction 1 to serializable.
This will place a range lock on the rows between 1 and 3, 
which prevents any other transaction from inserting new rows with in that range. 
This solves the phantom read problem. 

-- Transaction 1
Set transaction isolation level serializable
Begin Transaction

Select * from tblEmployees 
where Id between 1 and 3

-- Do Some work
waitfor delay '00:00:10'

Select * from tblEmployees 
where Id between 1 and 3

Commit Transaction

-- Transaction 2
Insert into tblEmployees values(2, 'Mittal')

---Difference between repeatable read and serializable
Repeatable read prevents only non-repeatable read.
Repeatable read isolation level ensures that the data that one transaction has read,
will be prevented from being updated or deleted by any other transaction,
but it doe not prevent new rows from being inserted by other transactions resulting in phantom read concurrency problem.

Serializable prevents both non-repeatable read and phantom read problems. 
Serializable isolation level ensures that the data that one transaction has read,
will be prevented from being updated or deleted by any other transaction.
It also prevents new rows from being inserted by other transactions,
so this isolation level prevents both non-repeatable read and phantom read problems.

---Difference between serializable and snapshot isolation levels
Serializable isolation is implemented by acquiring locks which means the resources are locked for the duration of the current transaction. 
This isolation level does not have any concurrency side effects but at the cost of significant reduction in concurrency.

Snapshot isolation doesn't acquire locks, it maintains versioning in Tempdb.
Since, snapshot isolation does not lock resources,
it can significantly increase the number of concurrent transactions while providing the same level of data consistency as serializable isolation does.

--Transaction 1
Set transaction isolation level serializable
Begin Transaction
Update tblInventory set Stock = 5 where Id = 1
waitfor delay '00:00:10'
Commit Transaction

-- Transaction 2
Set transaction isolation level serializable
Select Stock from tblInventory where Id = 1


-- Transaction 2
-- Enable snapshot isloation for the database
Alter database SampleDB SET ALLOW_SNAPSHOT_ISOLATION ON
-- Set the transaction isolation level to snapshot
Set transaction isolation level snapshot

Select ItemsInStock from tblInventory where Id = 1

---but same is not possible when we try to update/delete/insert on same data 

--Transaction 1
Set transaction isolation level serializable
Begin Transaction
Update tblInventory set ItemsInStock = 5 where Id = 1
waitfor delay '00:00:10'
Commit Transaction


-- Transaction 2
-- Enable snapshot isloation for the database
Alter database SampleDB SET ALLOW_SNAPSHOT_ISOLATION ON
-- Set the transaction isolation level to snapshot
Set transaction isolation level snapshot

Update tblInventory set ItemsInStock = 8 where Id = 1

it will give error 
while executing 2nd transaction




